# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KBhCany75sXTjQUp-T1YmDeEn5a1MWCf
"""

from flask import Flask, render_template, request
import numpy as np
import pickle

app = Flask(__name__)

# Load the trained model, scaler, and label encoder
with open('crop_recommendation_model.pkl', 'rb') as model_file:
    loaded_model = pickle.load(model_file)

with open('crop_recommendation_scaler.pkl', 'rb') as scaler_file:
    scaler = pickle.load(scaler_file)

with open('crop_recommendation_label_encoder.pkl', 'rb') as le_file:
    le = pickle.load(le_file)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        # Get input values from the form
        N_value = float(request.form['Nitrogen'])
        P_value = float(request.form['Phosporus'])
        K_value = float(request.form['Potassium'])
        temperature_value = float(request.form['Temperature'])
        humidity_value = float(request.form['Humidity'])
        pH_value = float(request.form['Ph'])
        rainfall_value = float(request.form['Rainfall'])

        # Create an array for the input data
        new_data = np.array([[N_value, P_value, K_value, temperature_value, humidity_value, pH_value, rainfall_value]])

        # Normalize the input using the loaded scaler
        scaled_new_data = scaler.transform(new_data)

        # Make predictions
        predictions = loaded_model.predict(scaled_new_data)

        # Decode the predicted label
        predicted_crop = le.inverse_transform([np.argmax(predictions)])[0]
        result = "{} is the best crop to be cultivated right there".format(predicted_crop)
	
        return render_template('index.html', result=result)

if __name__ == '__main__':
    app.run(debug=True)
